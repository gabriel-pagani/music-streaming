CREATE TRIGGER TRIGGER_EMPRESTIMOS_RECEM_ADICIONADOS ON EMPRESTIMOS AFTER INSERT AS BEGIN
	SET NOCOUNT ON;
	UPDATE EMPRESTIMOS
    SET JUROS_MENSAL = CASE
        WHEN USUARIOS.SCORE >=  900	THEN 0.25
        WHEN USUARIOS.SCORE >=  800	THEN 0.50
        WHEN USUARIOS.SCORE >=  700	THEN 0.75
        WHEN USUARIOS.SCORE >=  600	THEN 1.00
		WHEN USUARIOS.SCORE >=  500	THEN 1.25
        WHEN USUARIOS.SCORE >=  400	THEN 1.50
        WHEN USUARIOS.SCORE >=  300	THEN 1.75
        WHEN USUARIOS.SCORE >=  200	THEN 2.00
		WHEN USUARIOS.SCORE >=  100	THEN 2.25
		WHEN USUARIOS.SCORE >=    0	THEN 2.50
        WHEN USUARIOS.SCORE >= -100 THEN 2.75
        WHEN USUARIOS.SCORE >= -200 THEN 3.00
        WHEN USUARIOS.SCORE >= -300 THEN 3.25
		WHEN USUARIOS.SCORE >= -400 THEN 3.50
        WHEN USUARIOS.SCORE >= -500 THEN 3.75
        WHEN USUARIOS.SCORE >= -600 THEN 4.00
        WHEN USUARIOS.SCORE >= -700 THEN 4.25
		WHEN USUARIOS.SCORE >= -800 THEN 4.50
		WHEN USUARIOS.SCORE >= -900 THEN 4.75
        ELSE 5.00                    
	END
    FROM EMPRESTIMOS
    JOIN USUARIOS ON EMPRESTIMOS.ID_USUARIO = USUARIOS.ID
    JOIN INSERTED ON EMPRESTIMOS.ID = INSERTED.ID
    WHERE INSERTED.JUROS_MENSAL IS NULL;

	UPDATE EMPRESTIMOS
	SET DATA_VENCIMENTO = DATEADD(MONTH, SOLICITACOES.NUMERO_MESES, EMPRESTIMOS.DATA_EMPRESTIMO)
	FROM EMPRESTIMOS
    JOIN SOLICITACOES ON EMPRESTIMOS.ID_SOLICITACAO = SOLICITACOES.ID
	WHERE EMPRESTIMOS.DATA_VENCIMENTO IS NULL

	UPDATE EMPRESTIMOS
	SET VALOR_RETORNO = VALOR * POWER((1 + (JUROS_MENSAL / 100)), SOLICITACOES.NUMERO_MESES)
	FROM EMPRESTIMOS
    JOIN SOLICITACOES ON EMPRESTIMOS.ID_SOLICITACAO = SOLICITACOES.ID
	WHERE VALOR_RETORNO IS NULL
END 
GO

CREATE TRIGGER TRIGGER_EMPRESTIMOS ON EMPRESTIMOS AFTER INSERT, UPDATE, DELETE AS BEGIN
	SET NOCOUNT ON;
	UPDATE EMPRESTIMOS
	SET STATUS = 'Atrasado',
		OBSERVACOES = 'Empréstimo pago fora da data combinada'
	WHERE DATA_VENCIMENTO < GETDATE() AND OBSERVACOES IS NULL
	
	UPDATE USUARIOS
	SET STATUS = 
	CASE 
		WHEN EXISTS (SELECT 1 FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Atrasado') THEN 'Bloqueado'
        WHEN EXISTS (SELECT 1 FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Em andamento') THEN 'Ativo'
        ELSE 'Inativo'
    END;
END 
GO

CREATE TRIGGER TRIGGER_SOLICITACOES ON SOLICITACOES AFTER INSERT, UPDATE, DELETE AS BEGIN
	SET NOCOUNT ON;
	UPDATE SOLICITACOES
	SET SOLICITACOES.VALOR_INDICE = USUARIOS.RENDA_MENSAL * (CAST(USUARIOS.SCORE AS DECIMAL(10,1)) / 250)
	FROM SOLICITACOES
	JOIN USUARIOS ON SOLICITACOES.ID_SOLICITANTE = USUARIOS.ID
	WHERE SOLICITACOES.ID IN (SELECT ID FROM inserted);

	UPDATE SOLICITACOES
	SET DATA_ATUALIZACAO = GETDATE()
	WHERE STATUS = 'Aprovado'

	INSERT INTO EMPRESTIMOS (ID_USUARIO, ID_SOLICITACAO, VALOR, DATA_EMPRESTIMO, EXPLICACAO)
   	SELECT 
	    SOLICITACOES.ID_SOLICITANTE, 
		SOLICITACOES.ID,         	
	    SOLICITACOES.VALOR_SOLICITADO, 
	    SOLICITACOES.DATA_EMPRESTIMO, 
		SOLICITACOES.EXPLICACAO
	FROM SOLICITACOES
	WHERE SOLICITACOES.STATUS = 'Aprovado' 
	AND SOLICITACOES.ID IN (SELECT ID FROM inserted)
	AND NOT EXISTS (SELECT 1 FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_SOLICITACAO = SOLICITACOES.ID);
END
GO

CREATE TRIGGER TRIGGER_USUARIOS ON USUARIOS AFTER INSERT, UPDATE, DELETE AS BEGIN
	SET NOCOUNT ON;
	UPDATE USUARIOS
	SET DATA_ATUALIZACAO = GETDATE()
	WHERE (RENDA_MENSAL IS NOT NULL OR TELEFONE IS NOT NULL OR DATA_NASCIMENTO IS NOT NULL OR CPF IS NOT NULL)
	
	UPDATE USUARIOS
	SET SCORE = 
    	CASE 
		WHEN RENDA_MENSAL >=10000 THEN LEAST(1000, GREATEST(-1000, 500 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 9000 THEN LEAST(1000, GREATEST(-1000, 450 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 8000 THEN LEAST(1000, GREATEST(-1000, 400 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 7000 THEN LEAST(1000, GREATEST(-1000, 350 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 6000 THEN LEAST(1000, GREATEST(-1000, 300 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 5000 THEN LEAST(1000, GREATEST(-1000, 250 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 4000 THEN LEAST(1000, GREATEST(-1000, 200 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 3000 THEN LEAST(1000, GREATEST(-1000, 150 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 2000 THEN LEAST(1000, GREATEST(-1000, 100 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
		WHEN RENDA_MENSAL >= 1000 THEN LEAST(1000, GREATEST(-1000, 50 + ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) - ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)))
        ELSE 0
    END;
END 
GO
