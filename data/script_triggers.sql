CREATE OR ALTER TRIGGER TRIGGER_USUARIOS_PENDENCIAS ON SOLICITACOES INSTEAD OF INSERT AS BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        -- Verifica se todos os usuários envolvidos na inserção estão com o cadastro completo ou não estão com pendências
        IF EXISTS (
            SELECT 1
            FROM INSERTED S
            INNER JOIN USUARIOS U ON S.ID_SOLICITANTE = U.ID
            WHERE 
                (U.CPF IS NULL OR U.CPF = '') OR
                (U.DATA_NASCIMENTO IS NULL) OR
                (U.RENDA_MENSAL IS NULL OR U.RENDA_MENSAL <= 0)
        )
        BEGIN
            -- Impede a inserção na tabela SOLICITACOES
            RAISERROR ('Não é possível solicitar empréstimos. Cadastro do usuário incompleto.', 16, 1);
            RETURN;
        END

		-- Verifica se todos os usuários envolvidos na inserção estão sem pendências
        IF EXISTS (
            SELECT 1
            FROM INSERTED S
            INNER JOIN USUARIOS U ON S.ID_SOLICITANTE = U.ID
            WHERE 
                (U.STATUS = 'Bloqueado')
        )
        BEGIN
            -- Impede a inserção na tabela SOLICITACOES
            RAISERROR ('Não é possível solicitar empréstimos. Cadastro do usuário bloqueado.', 16, 1);
            RETURN;
        END

		-- Verifica se todos os usuários envolvidos na inserção estão sem solicitações ou empréstimos ativos
        IF EXISTS (
			SELECT 1
			FROM INSERTED S
			WHERE 
				-- Verifica se existe alguma solicitação em análise
				EXISTS (
					SELECT 1 
					FROM SOLICITACOES SOL 
					WHERE SOL.ID_SOLICITANTE = S.ID_SOLICITANTE
					AND SOL.STATUS = 'Em análise'
				)
				OR
				-- Verifica se existe algum empréstimo em andamento
				EXISTS (
					SELECT 1 
					FROM EMPRESTIMOS E 
					WHERE E.ID_USUARIO = S.ID_SOLICITANTE
					AND (E.STATUS = 'Em andamento' OR E.STATUS = 'Atrasado')
				)
		)
		BEGIN
			-- Impede a inserção na tabela SOLICITACOES
			RAISERROR ('Não é possível solicitar empréstimos. Usuário já tem uma solicitação ou empréstimo ativo.', 16, 1);
			RETURN;
		END

        -- Se o usuário estiver completo, permite a inserção normalmente
        INSERT INTO SOLICITACOES (ID_SOLICITANTE, VALOR_SOLICITADO, DATA_EMPRESTIMO, NUMERO_MESES, EXPLICACAO)
        SELECT 
			ID_SOLICITANTE, 
			VALOR_SOLICITADO, 
			DATA_EMPRESTIMO, 
			NUMERO_MESES, 
			EXPLICACAO
        FROM INSERTED;

    END TRY
    BEGIN CATCH
        PRINT 'Erro na trigger TRIGGER_USUARIOS_PENDENCIAS: ' + ERROR_MESSAGE();
    END CATCH
END
GO

CREATE OR ALTER TRIGGER TRIGGER_USUARIOS_ATUALIZADOS ON USUARIOS AFTER UPDATE AS BEGIN
    SET NOCOUNT ON;

    BEGIN TRY
        
	UPDATE USUARIOS
        SET SCORE = 
            CASE 
                WHEN RENDA_MENSAL IS NULL THEN 0
                ELSE
                    LEAST(1000, GREATEST(-1000, 
                        (FLOOR(RENDA_MENSAL / 1000) * 50) +
                        ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Quitado') * 25) -
                        ((SELECT COUNT(*) FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND OBSERVACOES LIKE 'Empréstimo pago fora da data combinada') * 250)
                    ))
            END;

	UPDATE USUARIOS
        SET DATA_ATUALIZACAO = GETDATE()
        FROM USUARIOS
        INNER JOIN INSERTED ON USUARIOS.ID = INSERTED.ID;

    END TRY
    BEGIN CATCH
        PRINT 'Erro na trigger TRIGGER_USUARIOS_ATUALIZADOS: ' + ERROR_MESSAGE();
    END CATCH
END
GO

CREATE OR ALTER TRIGGER TRIGGER_SOLICITACOES_ADICIONADAS ON SOLICITACOES AFTER INSERT AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		UPDATE SOLICITACOES
		SET SOLICITACOES.VALOR_INDICE = USUARIOS.RENDA_MENSAL * (CAST(USUARIOS.SCORE AS DECIMAL(10,1)) / 250)
		FROM SOLICITACOES
		JOIN USUARIOS ON SOLICITACOES.ID_SOLICITANTE = USUARIOS.ID
		WHERE SOLICITACOES.STATUS = 'Em análise'

	END TRY
	BEGIN CATCH
		PRINT 'Erro na trigger TRIGGER_SOLICITACOES_ATUALIZADAS ' + ERROR_MESSAGE();
	END CATCH
END
GO

CREATE OR ALTER TRIGGER TRIGGER_SOLICITACOES_ATUALIZADAS ON SOLICITACOES AFTER UPDATE AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		UPDATE SOLICITACOES
		SET DATA_ATUALIZACAO = GETDATE()
		FROM SOLICITACOES
		INNER JOIN INSERTED ON SOLICITACOES.ID = INSERTED.ID;

	END TRY
	BEGIN CATCH
		PRINT 'Erro na trigger TRIGGER_SOLICITACOES_ATUALIZADAS ' + ERROR_MESSAGE();
	END CATCH
END
GO

CREATE OR ALTER TRIGGER TRIGGER_SOLICITACOES_APROVADAS ON SOLICITACOES AFTER UPDATE AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		INSERT INTO EMPRESTIMOS (ID_USUARIO, ID_SOLICITACAO, VALOR, DATA_EMPRESTIMO, EXPLICACAO)
		SELECT 
			SOLICITACOES.ID_SOLICITANTE, 
			SOLICITACOES.ID,         	
			SOLICITACOES.VALOR_SOLICITADO, 
			SOLICITACOES.DATA_EMPRESTIMO, 
			SOLICITACOES.EXPLICACAO
		FROM SOLICITACOES
		WHERE SOLICITACOES.STATUS = 'Aprovado' 
		AND SOLICITACOES.ID IN (SELECT ID FROM inserted)
		AND NOT EXISTS (SELECT 1 FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_SOLICITACAO = SOLICITACOES.ID);

	END TRY
	BEGIN CATCH
		PRINT 'Erro na trigger TRIGGER_SOLICITACOES_APROVADAS: ' + ERROR_MESSAGE();
	END CATCH
END
GO

CREATE OR ALTER TRIGGER TRIGGER_EMPRESTIMOS_ADICIONADOS ON EMPRESTIMOS AFTER INSERT AS BEGIN
	SET NOCOUNT ON;
	
	BEGIN TRY

		UPDATE EMPRESTIMOS
		SET JUROS_MENSAL = 5.00 - (FLOOR((USUARIOS.SCORE + 1000) / 100) * 0.25);
		FROM EMPRESTIMOS
		JOIN USUARIOS ON EMPRESTIMOS.ID_USUARIO = USUARIOS.ID
		JOIN INSERTED ON EMPRESTIMOS.ID = INSERTED.ID
		WHERE INSERTED.JUROS_MENSAL IS NULL;

		UPDATE EMPRESTIMOS
		SET DATA_VENCIMENTO = DATEADD(MONTH, SOLICITACOES.NUMERO_MESES, EMPRESTIMOS.DATA_EMPRESTIMO)
		FROM EMPRESTIMOS
		JOIN SOLICITACOES ON EMPRESTIMOS.ID_SOLICITACAO = SOLICITACOES.ID
		WHERE EMPRESTIMOS.DATA_VENCIMENTO IS NULL

		UPDATE EMPRESTIMOS
		SET VALOR_RETORNO = VALOR * POWER((1 + (JUROS_MENSAL / 100)), SOLICITACOES.NUMERO_MESES)
		FROM EMPRESTIMOS
		JOIN SOLICITACOES ON EMPRESTIMOS.ID_SOLICITACAO = SOLICITACOES.ID
		WHERE VALOR_RETORNO IS NULL

	END TRY
	BEGIN CATCH
		PRINT 'Erro na trigger TRIGGER_EMPRESTIMOS_ADICIONADOS: ' + ERROR_MESSAGE();
	END CATCH
END 
GO

CREATE OR ALTER TRIGGER TRIGGER_EMPRESTIMOS ON EMPRESTIMOS AFTER INSERT, UPDATE AS BEGIN
	SET NOCOUNT ON;

	BEGIN TRY

		UPDATE EMPRESTIMOS
		SET STATUS = 'Atrasado',
			OBSERVACOES = 'Empréstimo pago fora da data combinada'
		WHERE DATA_VENCIMENTO < GETDATE() AND OBSERVACOES IS NULL
		
		UPDATE USUARIOS
		SET STATUS = 
		CASE 
			WHEN EXISTS (SELECT 1 FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Atrasado') THEN 'Bloqueado'
			WHEN EXISTS (SELECT 1 FROM EMPRESTIMOS WHERE EMPRESTIMOS.ID_USUARIO = USUARIOS.ID AND STATUS = 'Em andamento') THEN 'Ativo'
			ELSE 'Inativo'
		END;

	END TRY
	BEGIN CATCH
		PRINT 'Erro na trigger TRIGGER_EMPRESTIMOS: ' + ERROR_MESSAGE();
	END CATCH
END 
GO
